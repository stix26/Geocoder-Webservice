from flask import Flask, render_template, request, send_file
import pandas
from geopy.geocoders import ArcGIS
import datetime


app=Flask(__name__)

@app.route("/") #Function defining the homepage
def index():
    return render_template("index.html")

@app.route("/success", methods=['POST']) #Create a success function #(methods=['POST']) we have to have a methods parameter because we are expecting a post request
def success(): #User does a submission and you want to capture that using a success function 
    global filename #Made filename variable global to use the variable in the app root for ("/download")
    if request.method=='POST': #Check for request . . .if we got  a request 
        file=request.files["file"] #Get the file. ['file'] is the name of <input> located on index.html page (name="file"/>)
        try: #Use try & except method to avoid error page if there isn't an Address column in CSV file
            df=pandas.read_csv(file) #Will read file. This variable is reading the file=request.files["file"] variable
            nom=ArcGIS()
            n=nom.geocode("")
            #df["Address"]=df["Address"]+", "+df["City"] + ", "+ df["State"]+ ", " + df["Country"]
            df["Coordinates"]=df["Address"].apply(nom.geocode)
            df["Latitude"]=df["Coordinates"].apply(lambda x: x.latitude if x != None else None)
            df["Longitude"]=df["Coordinates"].apply(lambda x: x.longitude if x != None else None)
            #df=df.drop("Coordinates", 1)
            filename=datetime.datetime.now().strftime("uploads/%Y-%m-%d-%H-%M-%S-%f"+".csv") #Created this line to make each generate file/download unique
            df.to_csv(filename, index=None) #Then generate a CSV file. Sorting it in the filename global variable>
            return render_template("index.html", text=df.to_html(), btn="download.html") #Then return the template
        except: #If there isn't an Address column instead of returning an html table(text=df.to_html()) return text="Missing address etc."
            return render_template("index.html", text="Missing address in column of your CSV file!")

@app.route("/download") #The next thing a user will do is press the download button which will trigger another function. That function has to trigger the send_file method which will send to the user. 
def download():
    return send_file(filename, attachment_filename="uploadedfile.csv", as_attachment=True) #Want to send to the user the file that was generated in the app root for success function. Then create a new filename generated by the success function (attachment_filename="uploadedfile.csv") 


if __name__=='__main__':
    #app.debug=False
    app.debug=True
    app.run()
